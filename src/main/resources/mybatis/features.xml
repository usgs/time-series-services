<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="features">

    <sql id="queryFilters">
        <if test="pointLowLeft != null and pointUpRight != null">
            and st_intersects(
                              st_setsrid(
                                         st_makebox2d(
                                                      st_geomfromtext(#{pointLowLeft}, 4326),
                                                      st_geomfromtext(#{pointUpRight}, 4326)
                                                     ),
                                         4326),
                              st_setsrid(geom, 4326)
                             )
        </if>
        <if test="countries != null">
             and country_cd in <foreach item="i" collection="countries" open="(" separator="," close=")">#{i}</foreach>
         </if>
        <if test="states != null">
            and country_cd || ':' || state_cd in <foreach item="i" collection="states" open="(" separator="," close=")">#{i}</foreach>
        </if>
        <if test="counties != null">
            and country_cd || ':' || state_cd || ':' || county_cd in <foreach item="i" collection="counties" open="(" separator="," close=")">#{i}</foreach>
        </if>
        <if test="nationalAquiferCodes != null">
            and nat_aqfr_cd in <foreach item="i" collection="nationalAquiferCodes" open="(" separator="," close=")">#{i}</foreach>
        </if>
        <if test="monitoringLocationNumbers != null">
            and monitoring_location.site_identification_number  in <foreach item="i" collection="monitoringLocationNumbers" open="(" separator="," close=")">#{i}</foreach>
        </if>
        <if test="agencyCodes != null">
            and agency_cd in <foreach item="i" collection="agencyCodes" open="(" separator="," close=")">#{i}</foreach>
        </if>
        <if test="hydrologicUnits != null">
            and calculated_huc_12 in <foreach item="i" collection="hydrologicUnits" open="(" separator="," close=")">#{i}</foreach>
        </if>
        <if test="monitoringLocationType != null">
            and site_type in <foreach item="i" collection="monitoringLocationType" open="(" separator="," close=")">#{i}</foreach>
        </if>
    </sql>

    <sql id="collectionsJoin">
        left join (
                   select monitoring_location_identifier,
                          jsonb_agg(
                                    json_build_object(
                                                      'rel', 'collection',
                                                      'type', 'application/json',
                                                      'title', network_name,
                                                      'href', #{serverUrl,jdbcType=VARCHAR} || 'collections/' || network_code || '?f=json'
                                                     )
                                   ) collection_links
                      <include refid="common.networkSites"/>
                        group by monitoring_location_identifier
                  ) collections
          on monitoring_location.monitoring_location_identifier = collections.monitoring_location_identifier
    </sql>

    <sql id="singleFeature">
        select json_build_object(
                                 'type', 'Feature',
                                 'id', monitoring_location.monitoring_location_identifier,
                                 'geometry', json_build_object(
                                                               'type', 'Point',
                                                               'coordinates', json_build_array(
                                                                                               trunc(st_x(st_transform(geom, 4326))::numeric, 7),
                                                                                               trunc(st_y(st_transform(geom, 4326))::numeric, 7)
                                                                                              )
                                                              ),
                                 'properties', json_build_object(
                                                                 'agency', agency,
                                                                 'monitoringLocationNumber', site_identification_number,
                                                                 'monitoringLocationName', site_name,
                                                                 'monitoringLocationType', site_type,
                                                                 'district', district,
                                                                 'state', state,
                                                                 'county', county,
                                                                 'country', country,
                                                                 'monitoringLocationAltitudeLandSurface', altitude_of_guage_land_surface,
                                                                 'altitudeMethod',  method_altitude_determined,
                                                                 'altitudeAccuracy', altitude_accuracy,
                                                                 'altitudeDatum', altitude_datum,
                                                                 'nationalAquifer', national_aquifer,
                                                                 'nationalAquiferCode', nat_aqfr_cd,
                                                                 'localAquifer', local_aquifer,
                                                                 'localAquiferType', local_aquifer_type,
                                                                 'wellDepth', well_depth,
                                                                 'holeDepth', hole_depth,
                                                                 'holeDepthSource', source_of_hole_depth,
                                                                 'agencyCode', agency_cd,
                                                                 'districtCode', district_cd,
                                                                 'stateFIPS', country_cd || ':' || state_cd,
                                                                 'countyFIPS', country_cd || ':' || state_cd || ':' || county_cd,
                                                                 'countryFIPS', country_cd,
                                                                 'hydrologicUnit', calculated_huc_12,
                                                                 'monitoringLocationUrl', 'https://waterdata.usgs.gov/monitoring-location/' || site_identification_number
                                                                ),
                                 'links', jsonb_build_array(
                                                            json_build_object(
                                                                              'rel', 'self',
                                                                              'type', 'application/geo+json',
                                                                              'title', 'This document as GeoJSON',
                                                                              'href', #{serverUrl,jdbcType=VARCHAR} || 'collections/' || #{collectionId,jdbcType=VARCHAR}
                                                                                      || '/items/' || monitoring_location.monitoring_location_identifier || '?f=json'
                                                                             ),
                                                            json_build_object(
                                                                              'rel', 'collection',
                                                                              'type', 'application/json',
                                                                              'title', #{monLocTitle,jdbcType=VARCHAR},
                                                                              'href', #{serverUrl,jdbcType=VARCHAR} || 'collections/' || 'monitoring-locations' || '?f=json'
                                                                             )
                                                           ) || coalesce(collection_links, jsonb_build_array()) ) json
        <choose>
            <when test="collectionId == 'monitoring-locations'">,
                       #{monLocTitle} collection_title
                  from nwis.monitoring_location
                  <include refid="collectionsJoin"/>
                 where geom is not null
            </when>

            <otherwise>,
                       network_name collection_title
                  <include refid="common.networkSites"/>
                  <include refid="collectionsJoin"/>
                 where geom is not null and
                       network_code = #{collectionId}
            </otherwise>
        </choose>
        <if test="featureId != null">
                   and monitoring_location.monitoring_location_identifier = #{featureId}
        </if>
        <include refid="queryFilters"/>
                 order by collection_title, monitoring_location.monitoring_location_identifier
        <if test="limit != null">
                 limit #{limit}
        </if>
        <if test="startIndex != null">
                 offset #{startIndex}
        </if>
    </sql>

    <select id="getCollectionFeaturesJson" parameterType="map" resultType="String">
        select json_build_object(
                                 'type', 'FeatureCollection',
                                 'features', json_agg(feature.json),
                                 'links', json_build_array(
                                                           json_build_object(
                                                                             'type', 'text/html',
                                                                             'rel', 'canonical',
                                                                             'title', 'information',
                                                                             'href', 'https://waterdata.usgs.gov'
                                                                             ),
                                                           json_build_object(
                                                                             'type', 'application/geo+json',
                                                                             'rel', 'self',
                                                                             'title', 'This document as GeoJSON',
                                                                             'href', #{serverUrl} || 'collections/' || #{collectionId,jdbcType=VARCHAR}
                                                                                     || '/items?f=json' || '&amp;startIndex=' || #{startIndex}
                                                                                     || '&amp;limit=' || #{limit}
                                                                            ),
                                                           json_build_object(
                                                                             'type', 'application/json',
                                                                             'rel', 'collection',
                                                                             'title', collection_title,
                                                                             'href',  #{serverUrl} || 'collections/' || #{collectionId,jdbcType=VARCHAR}
                                                                                      || '?f=json'
                                                                            )
        <if test="prevStartIndex != null">,
                                                           json_build_object(
                                                                             'type', 'application/geo+json',
                                                                             'rel', 'prev',
                                                                             'title', 'items (prev)',
                                                                             'href', #{serverUrl} || 'collections/' || #{collectionId,jdbcType=VARCHAR}
                                                                                     || '/items?f=json'  || #{prevStartIndex}  || #{filterOptions}
                                                                            )
        </if>
        <if test="nextStartIndex != null">,
                                                           json_build_object(
                                                                             'type', 'application/geo+json',
                                                                             'rel', 'next',
                                                                             'title', 'items (next)',
                                                                             'href', #{serverUrl} || 'collections/' || #{collectionId,jdbcType=VARCHAR}
                                                                                     || '/items?f=json'  || #{nextStartIndex} || #{filterOptions}
                                                                            )
        </if>
                                                          ),
                                 'timeStamp', to_char(now()::timestamp at time zone 'UTC', 'YYYY-MM-DD"T"HH24:MI:SS.US"Z"')
                                )
          from (
                <include refid="singleFeature"/>
               ) as feature
          group by collection_title
    </select>

    <select id="getCollectionFeatureJson" parameterType="map" resultType="String">
        <include refid="singleFeature"/>
    </select>

    <select id="getCollectionFeatureCount" parameterType="map" resultType="int">
        select count(*)
        <choose>
            <when test="collectionId == 'monitoring-locations'">
                 from nwis.monitoring_location
                where geom is not null
            </when>
            <otherwise>
                <include refid="common.networkSites"/>
                where geom is not null and
                      network_code = #{collectionId}
            </otherwise>
        </choose>
        <include refid="queryFilters"/>
    </select>

</mapper>
